# Generated by Django 2.0.7 on 2018-08-03 03:25

import DjangoUeditor.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': '系统管理',
                'verbose_name_plural': '系统管理',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ItemInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('way', models.SmallIntegerField(choices=[(1, '文本框输入'), (0, '文件上传')], default=1, verbose_name='信息提交方式')),
                ('text', models.CharField(max_length=100, verbose_name='文字描述')),
            ],
            options={
                'verbose_name': '申请信息设置',
                'verbose_name_plural': '申请信息设置',
            },
        ),
        migrations.CreateModel(
            name='Items',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial', models.IntegerField(default=0, verbose_name='序号')),
                ('name', models.CharField(max_length=100, verbose_name='活动名称')),
                ('jump_link', models.URLField(blank=True, verbose_name='外部链接')),
                ('detail_link', models.URLField(blank=True, verbose_name='详情链接')),
                ('is_show', models.BooleanField(default=True, verbose_name='首页显示')),
                ('is_active', models.BooleanField(default=True, verbose_name='活动开启')),
                ('ipc', models.BooleanField(default=True, verbose_name='IP限制')),
                ('once_odn', models.BooleanField(default=False, verbose_name='单号唯一')),
                ('verifyc', models.BooleanField(default=True, verbose_name='审核时无法申请')),
                ('timec', models.BooleanField(default=False, verbose_name='时间限制')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='开启时间')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='结束时间')),
                ('dailyc', models.BooleanField(default=True, verbose_name='每日限制')),
                ('c_times', models.IntegerField(blank=True, verbose_name='限制次数')),
                ('c_msg', models.CharField(default='您已提交过申请，请勿重复', max_length=150, verbose_name='限制提醒')),
                ('pic', models.ImageField(blank=True, upload_to='static/', verbose_name='活动图片')),
                ('info', DjangoUeditor.models.UEditorField(blank=True, default='', verbose_name='活动详情')),
                ('is_online', models.BooleanField(default=True, verbose_name='开启在线申请')),
            ],
            options={
                'verbose_name': '优惠活动管理',
                'verbose_name_plural': '优惠活动管理',
            },
        ),
        migrations.CreateModel(
            name='Rec',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='会员账号')),
                ('ip', models.GenericIPAddressField(verbose_name='IP地址')),
                ('info_post', models.CharField(blank=True, max_length=150, verbose_name='查看详细')),
                ('apply_time', models.DateTimeField(verbose_name='申请时间')),
                ('verify', models.SmallIntegerField(choices=[(0, '待处理'), (1, '审核中'), (2, '已派发'), (3, '未通过')], default=0, verbose_name='审核状态')),
                ('verify_time', models.DateTimeField(blank=True, null=True, verbose_name='审核时间')),
                ('given', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, verbose_name='派发金额')),
                ('answer', models.CharField(blank=True, max_length=200, verbose_name='管理员回复')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rebate.Items', verbose_name='申请活动名称')),
                ('who', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='操作人')),
            ],
            options={
                'verbose_name': '申请记录',
                'verbose_name_plural': '申请记录',
            },
        ),
        migrations.AddField(
            model_name='iteminfo',
            name='for_item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rebate.Items'),
        ),
        migrations.AddField(
            model_name='site',
            name='game',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rebate.Items', verbose_name='所管游戏'),
        ),
        migrations.AddField(
            model_name='site',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='site',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='RecMine',
            fields=[
            ],
            options={
                'verbose_name': '审核中会员',
                'verbose_name_plural': '审核中会员',
                'proxy': True,
                'indexes': [],
            },
            bases=('rebate.rec',),
        ),
        migrations.CreateModel(
            name='RecNew',
            fields=[
            ],
            options={
                'verbose_name': '未处理会员',
                'verbose_name_plural': '未处理会员',
                'proxy': True,
                'indexes': [],
            },
            bases=('rebate.rec',),
        ),
        migrations.CreateModel(
            name='RecPass',
            fields=[
            ],
            options={
                'verbose_name': '已处理会员',
                'verbose_name_plural': '已处理会员',
                'proxy': True,
                'indexes': [],
            },
            bases=('rebate.rec',),
        ),
    ]
